continue
object.courses.pluck(:name)
object.courses.pluck(:name).uniq
continue
params
continue
round_params === params
params
round_params
new_round
continue
current_user
is_authorized
params
continue
object.tee_boxes.average(:rating)
continue
object.rounds.map{|r| r.score_to_par}.sum / object.rounds_played
object.tee_boxes.average(:rating).to_i
object.tee_boxes.average(:rating).to_f
object.tee_boxes.average(:rating)
object.tee_boxes.pluck(:rating, :slope).sum
object.tee_boxes.pluck(:rating, :slope)
object.tee_boxes
continue
object.tee_boxes
continue
object.scores.map{|s| s.putts}.sum
object.scores.map{|s| s.putt}.sum
object.rounds.reduce{|a,r| a + r.score_to_par}
object.rounds.map{|r| r.score_to_par}.sum
object.scores
object.scores.count
object.scores.where(fir: true).count
object.scores
continue
object.rounds.map{|s| s.gir_percentage}
object
continue
object.rounds.filter{|s| s.score.fir= true} 
object.rounds.first.fir
object.rounds.filter{|s| s.fir === true} 
object.rounds.map{|s| s.score_to_par}.average
object.rounds.map{|s| s.score_to_par}.sum
object.rounds.map{|s| s.score_to_par}
object.rounds.map |s| do
object.rounds.pluck(:score_to_par)
object.rounds.first.scores.pluck(:score).sum
object.rounds.first.scores.sum
object.rounds.first.scores
object.rounds.first.score
object.rounds.first.score_to_par
object.rounds.first
continue
object.scores.pluck(:score).sum
object.scores
continue
object.scores
continue
object.rounds.score
continue
object.rounds.score
continue
object.rounds
object.courses.pluck(:name)
object.courses
object.rounds.count
continue
object
continue
self
object_id
object
continue
object.course.tee_boxes.find_by(tee: object.tee).par
object.course.tee_boxes.find_by(tee: object.tee)
object.course.par
object.scores.pluck(:score).sum
object.score
continue
current_user
continue
sessi
current_user
continue
current_user
continue
session[:user_id]
current_user
continue
current_user
continue
session[:user_id]
session[user]
session.user
session[user_id]
session.user_id
session
continue
self
current_user
session
continue
session.duplicable?
session.dupicable?
session.exists?
session.methods
methods
session
continue
i
18.times do|i|
Hole
hole
params
i
exit
object.holes.pluck(:distance).sum
object.holes.pluck(:distance)
object.holes
exit
quit
continue
object.course.name
object.course
object
exit
continue
exit
continue
object.name
object
quit
continue
params
continue
exit
goodbye
finish
done
skip
next
invalid.record.errors.full_messages
invalid.record.errors
invalid.record
invalid
continue
error.record.full_message
error.record.full_messages
error.record
error
quit
error
